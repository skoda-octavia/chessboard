{"ast":null,"code":"import { Piece } from \"../../piece\";\nexport class King extends Piece {\n  constructor() {\n    super(...arguments);\n    this.alreadyMoved = false;\n    this.directions = [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n  }\n  possibleMoves(colorBoard) {\n    var possibleMoves = [];\n    var boardHeight = colorBoard.length;\n    var boardWidth = colorBoard[0].length;\n    for (const direction of this.directions) {\n      var tempY = this.fieldHeight + direction[0];\n      var tempX = this.fieldWidth + direction[1];\n      if (this.correctField(boardHeight, boardWidth, tempY, tempX)) {\n        if (this.color != colorBoard[tempY][tempX]) {\n          possibleMoves.push([tempY, tempX]);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n  moveTo(height, width) {\n    this.fieldHeight = height;\n    this.fieldWidth = width;\n    if (!this.alreadyMoved) {\n      this.alreadyMoved = true;\n    }\n  }\n}","map":{"version":3,"names":["Piece","King","constructor","alreadyMoved","directions","possibleMoves","colorBoard","boardHeight","length","boardWidth","direction","tempY","fieldHeight","tempX","fieldWidth","correctField","color","push","moveTo","height","width"],"sources":["C:\\Users\\UÅ¼ytkownik\\Desktop\\student fullstack\\studentManager\\src\\app\\chess\\pieces\\piece\\king\\king.ts"],"sourcesContent":["import { Piece, PieceColor } from \"../../piece\";\n\nexport abstract class King extends Piece {\n\n    alreadyMoved: boolean = false;\n    directions: number[][] = [\n            [0, 1],\n            [0, -1],\n            [1, 0],\n            [-1, 0],\n            [1, 1],\n            [1, -1],\n            [-1, 1],\n            [-1, -1]\n        ];\n\n    possibleMoves(colorBoard: PieceColor[][]): number[][] {\n        var possibleMoves = [];\n        var boardHeight = colorBoard.length;\n        var boardWidth = colorBoard[0].length;\n\n        for (const direction of this.directions) {\n            var tempY = this.fieldHeight + direction[0];\n            var tempX = this.fieldWidth + direction[1];\n            if (this.correctField(boardHeight, boardWidth, tempY, tempX)) {\n                if (this.color != colorBoard[tempY][tempX]) {\n                    possibleMoves.push([tempY, tempX])\n                }\n            }\n        }\n\n        return possibleMoves;\n    }\n\n    override moveTo(height: number, width: number): void {\n        this.fieldHeight = height;\n        this.fieldWidth = width;\n        \n        if (!this.alreadyMoved) {\n            this.alreadyMoved = true;\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAoB,aAAa;AAE/C,OAAM,MAAgBC,IAAK,SAAQD,KAAK;EAAxCE,YAAA;;IAEI,KAAAC,YAAY,GAAY,KAAK;IAC7B,KAAAC,UAAU,GAAe,CACjB,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACX;EA4BT;EA1BIC,aAAaA,CAACC,UAA0B;IACpC,IAAID,aAAa,GAAG,EAAE;IACtB,IAAIE,WAAW,GAAGD,UAAU,CAACE,MAAM;IACnC,IAAIC,UAAU,GAAGH,UAAU,CAAC,CAAC,CAAC,CAACE,MAAM;IAErC,KAAK,MAAME,SAAS,IAAI,IAAI,CAACN,UAAU,EAAE;MACrC,IAAIO,KAAK,GAAG,IAAI,CAACC,WAAW,GAAGF,SAAS,CAAC,CAAC,CAAC;MAC3C,IAAIG,KAAK,GAAG,IAAI,CAACC,UAAU,GAAGJ,SAAS,CAAC,CAAC,CAAC;MAC1C,IAAI,IAAI,CAACK,YAAY,CAACR,WAAW,EAAEE,UAAU,EAAEE,KAAK,EAAEE,KAAK,CAAC,EAAE;QAC1D,IAAI,IAAI,CAACG,KAAK,IAAIV,UAAU,CAACK,KAAK,CAAC,CAACE,KAAK,CAAC,EAAE;UACxCR,aAAa,CAACY,IAAI,CAAC,CAACN,KAAK,EAAEE,KAAK,CAAC,CAAC;;;;IAK9C,OAAOR,aAAa;EACxB;EAESa,MAAMA,CAACC,MAAc,EAAEC,KAAa;IACzC,IAAI,CAACR,WAAW,GAAGO,MAAM;IACzB,IAAI,CAACL,UAAU,GAAGM,KAAK;IAEvB,IAAI,CAAC,IAAI,CAACjB,YAAY,EAAE;MACpB,IAAI,CAACA,YAAY,GAAG,IAAI;;EAEhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}