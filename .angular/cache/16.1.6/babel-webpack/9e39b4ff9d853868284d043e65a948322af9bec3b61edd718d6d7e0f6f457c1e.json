{"ast":null,"code":"import { Piece, PieceColor } from \"../../piece\";\nexport class InfiniteRangePiece extends Piece {\n  possibleInfiniteRangeMoves(colorBoard) {\n    var boardWidth = colorBoard[0].length;\n    var boardHeight = colorBoard.length;\n    var possibleMoves = [];\n    for (let i = 0; i < this.directions.length; i++) {\n      var changeY = this.directions[i][0];\n      var changeX = this.directions[i][1];\n      var tempY = this.fieldHeight + changeY;\n      var tempX = this.fieldWidth + changeX;\n      while (this.correctField(boardHeight, boardWidth, tempY, tempX)) {\n        var tempColor = colorBoard[tempY][tempX];\n        if (tempColor == this.color) {\n          break;\n        }\n        possibleMoves.push([tempY, tempX]);\n        if (tempColor != PieceColor.None) {\n          break;\n        }\n        tempY += changeY;\n        tempX += changeX;\n      }\n    }\n    return possibleMoves;\n  }\n  constructor(fieldHeight, fieldWidth, field) {\n    super(fieldHeight, fieldWidth, field);\n  }\n}","map":{"version":3,"names":["Piece","PieceColor","InfiniteRangePiece","possibleInfiniteRangeMoves","colorBoard","boardWidth","length","boardHeight","possibleMoves","i","directions","changeY","changeX","tempY","fieldHeight","tempX","fieldWidth","correctField","tempColor","color","push","None","constructor","field"],"sources":["C:\\Users\\UÅ¼ytkownik\\Desktop\\student fullstack\\studentManager\\chessboard\\src\\app\\chess\\pieces\\piece\\infiniteRangePiece\\infinite-range-piece.ts"],"sourcesContent":["import { Field } from \"src/app/chess/field/field\";\nimport { Piece, PieceColor } from \"../../piece\";\n\n\n\nexport abstract class InfiniteRangePiece extends Piece {\n    \n    abstract directions: number[][];\n\n\n    possibleInfiniteRangeMoves(colorBoard: PieceColor[][]): number[][] {\n        var boardWidth = colorBoard[0].length;\n\n        var boardHeight = colorBoard.length;\n        var possibleMoves = [];\n\n        for (let i = 0; i < this.directions.length; i++) {\n            var changeY = this.directions[i][0];\n            var changeX = this.directions[i][1];\n\n            var tempY = this.fieldHeight + changeY;\n            var tempX = this.fieldWidth + changeX;\n\n            while (this.correctField(boardHeight, boardWidth, tempY, tempX)) {\n                var tempColor = colorBoard[tempY][tempX];\n                if (tempColor == this.color) { break }\n                possibleMoves.push([tempY, tempX]);\n                if (tempColor != PieceColor.None) { break; }\n                tempY += changeY;\n                tempX += changeX;\n            }\n        }\n        return possibleMoves;\n    }\n\n    \n    constructor(fieldHeight: number, fieldWidth: number, field: Field) {\n        super(fieldHeight, fieldWidth, field);\n    }\n}\n"],"mappings":"AACA,SAASA,KAAK,EAAEC,UAAU,QAAQ,aAAa;AAI/C,OAAM,MAAgBC,kBAAmB,SAAQF,KAAK;EAKlDG,0BAA0BA,CAACC,UAA0B;IACjD,IAAIC,UAAU,GAAGD,UAAU,CAAC,CAAC,CAAC,CAACE,MAAM;IAErC,IAAIC,WAAW,GAAGH,UAAU,CAACE,MAAM;IACnC,IAAIE,aAAa,GAAG,EAAE;IAEtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,UAAU,CAACJ,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC7C,IAAIE,OAAO,GAAG,IAAI,CAACD,UAAU,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC;MACnC,IAAIG,OAAO,GAAG,IAAI,CAACF,UAAU,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC;MAEnC,IAAII,KAAK,GAAG,IAAI,CAACC,WAAW,GAAGH,OAAO;MACtC,IAAII,KAAK,GAAG,IAAI,CAACC,UAAU,GAAGJ,OAAO;MAErC,OAAO,IAAI,CAACK,YAAY,CAACV,WAAW,EAAEF,UAAU,EAAEQ,KAAK,EAAEE,KAAK,CAAC,EAAE;QAC7D,IAAIG,SAAS,GAAGd,UAAU,CAACS,KAAK,CAAC,CAACE,KAAK,CAAC;QACxC,IAAIG,SAAS,IAAI,IAAI,CAACC,KAAK,EAAE;UAAE;;QAC/BX,aAAa,CAACY,IAAI,CAAC,CAACP,KAAK,EAAEE,KAAK,CAAC,CAAC;QAClC,IAAIG,SAAS,IAAIjB,UAAU,CAACoB,IAAI,EAAE;UAAE;;QACpCR,KAAK,IAAIF,OAAO;QAChBI,KAAK,IAAIH,OAAO;;;IAGxB,OAAOJ,aAAa;EACxB;EAGAc,YAAYR,WAAmB,EAAEE,UAAkB,EAAEO,KAAY;IAC7D,KAAK,CAACT,WAAW,EAAEE,UAAU,EAAEO,KAAK,CAAC;EACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}