{"ast":null,"code":"import { Field } from \"../field/field\";\nimport { PieceColor } from \"../pieces/piece\";\nimport { BlackBishop } from \"../pieces/piece/infiniteRangePiece/bishop/blackBishop/black-bishop\";\nimport { WhiteBishop } from \"../pieces/piece/infiniteRangePiece/bishop/whiteBishop/white-bishop\";\nimport { BlackQueen } from \"../pieces/piece/infiniteRangePiece/queen/blackQueen/black-queen\";\nimport { WhiteQueen } from \"../pieces/piece/infiniteRangePiece/queen/whiteQueen/white-queen\";\nimport { BlackRook } from \"../pieces/piece/infiniteRangePiece/rook/blackRook/black-rook\";\nimport { WhiteRook } from \"../pieces/piece/infiniteRangePiece/rook/whiteRook/white-rook\";\nimport { BlackKing } from \"../pieces/piece/king/blackKing/black-king\";\nimport { WhiteKing } from \"../pieces/piece/king/whiteKing/white-king\";\nimport { BlackKnight } from \"../pieces/piece/knight/blackKnight/black-knight\";\nimport { WhiteKnight } from \"../pieces/piece/knight/whiteKnight/white-knight\";\nexport class Board {\n  buttonClicked(height, width) {\n    this.checkFieldArgs(height, width);\n    if (this.anyButtonClicked) {\n      this.secondButtonClicked(height, width);\n    } else {\n      this.firstButtonClicked(height, width);\n    }\n  }\n  markPossibleMoves(possibleMoves, pieceColor) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      var y = possibleMoves[i][0];\n      var x = possibleMoves[i][1];\n      var field = this.fields[y][x];\n      console.log('markPossible moves:', field);\n      if (field.piece == null) {\n        field.markedPossibleMove = true;\n      }\n      //if piece same color\n      else if (field.piece.color != pieceColor) {\n        field.markedToCapture = true;\n      } else {}\n    }\n  }\n  canQueenSideCastle(pieceColor) {\n    if (pieceColor == PieceColor.White) {\n      return this.canWhiteQueenCastle();\n    } else if (pieceColor == PieceColor.Black) {\n      return this.canBlackQueenCastle();\n    } else {\n      console.error(\"given color is none\");\n    }\n    return true;\n  }\n  canBlackQueenCastle() {\n    return true;\n  }\n  canWhiteQueenCastle() {\n    // king and rook on places\n    if (!(this.fields[7][0].piece instanceof WhiteRook) || !(this.fields[7][4].piece instanceof WhiteKing)) {\n      return false;\n    }\n    // king and rook moved\n    if (this.fields[7][0].piece.alreadyMoved || this.fields[7][4].piece.alreadyMoved) {\n      return false;\n    }\n    // fields occupied\n    if (this.fields[7][1].piece || this.fields[7][2].piece || this.fields[7][3].piece) {\n      return false;\n    }\n    return true;\n  }\n  firstButtonClicked(height, width) {\n    //mark\n    if (this.fields[height][width].piece) {\n      this.markedField = this.fields[height][width];\n      var possibleMoves = this.markedField.piece.possibleMoves(this.colorMap);\n      //console.log('possibleFields,', possibleMoves);\n      this.markPossibleMoves(possibleMoves, this.markedField.piece.color);\n      this.fields[height][width].markedToMove = true;\n      this.anyButtonClicked = true;\n    }\n  }\n  secondButtonClicked(height, width) {\n    //console.log('sec but field: ', this.fields[height][width]);\n    if (!this.fields[height][width].marked()) {}\n    if (this.fields[height][width].markedPossibleMove) {\n      this.move(height, width);\n      this.unmarkButtons();\n    } else if (this.fields[height][width].markedToCapture) {\n      this.capture(height, width);\n      this.unmarkButtons();\n    } else if (this.fields[height][width].markedToMove) {\n      this.unmarkButtons();\n    }\n  }\n  move(height, width) {\n    this.colorMap[this.markedField.piece.fieldHeight][this.markedField.piece.fieldWidth] = PieceColor.None;\n    this.colorMap[height][width] = this.markedField.piece.color;\n    this.markedField.piece.moveTo(height, width);\n    this.fields[height][width].piece = this.markedField.piece;\n    console.log('new piece: ', this.fields[height][width].piece);\n    this.markedField.piece = null;\n  }\n  capture(height, width) {\n    this.fields[height][width].piece = null;\n    this.move(height, width);\n    console.log('color  map: ', this.colorMap);\n  }\n  checkFieldArgs(height, width) {\n    if (!Number.isInteger(height) || height < 0 || height >= this.height) {\n      console.error(\" height: ${height} is invalid\", height);\n    }\n    if (!Number.isInteger(width) || width < 0 && width >= this.width) {\n      console.error(\"width: ${width} is invalid\", width);\n    }\n  }\n  setBaseBoard() {\n    this.height = 8;\n    this.width = 8;\n    var nextSquareWhite = true;\n    for (let i = 0; i < this.width; i++) {\n      this.fields.push([]);\n      for (let j = 0; j < this.height; j++) {\n        var field = new Field(nextSquareWhite, i, j);\n        field.board = this;\n        this.fields[i].push(field);\n        nextSquareWhite = !nextSquareWhite;\n      }\n      if (this.width % 2 === 0) {\n        nextSquareWhite = !nextSquareWhite;\n      }\n    }\n  }\n  unmarkButtons() {\n    this.anyButtonClicked = false;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        this.fields[i][j].unmark();\n      }\n    }\n  }\n  setBasePosition() {\n    this.fields[0][0].setPiece(new BlackRook(0, 0));\n    this.fields[0][1].setPiece(new BlackKnight(0, 1));\n    this.fields[0][2].setPiece(new BlackBishop(0, 2));\n    this.fields[0][3].setPiece(new BlackQueen(0, 3));\n    this.fields[0][4].setPiece(new BlackKing(0, 4, this));\n    this.fields[0][5].setPiece(new BlackBishop(0, 5));\n    this.fields[0][6].setPiece(new BlackKnight(0, 6));\n    this.fields[0][7].setPiece(new BlackRook(0, 7));\n    // for (let i = 0; i < this.width; i++) { this.fields[1][i].setPiece(new BlackPawn()); }\n    // for (let i = 0; i < this.width; i++) { this.fields[6][i].setPiece(new WhitePawn()); }\n    this.fields[7][0].setPiece(new WhiteRook(7, 0));\n    this.fields[7][1].setPiece(new WhiteKnight(7, 1));\n    this.fields[7][2].setPiece(new WhiteBishop(7, 2));\n    this.fields[7][3].setPiece(new WhiteQueen(7, 3));\n    this.fields[7][4].setPiece(new WhiteKing(7, 4, this));\n    this.fields[7][5].setPiece(new WhiteBishop(7, 5));\n    this.fields[7][6].setPiece(new WhiteKnight(7, 6));\n    this.fields[7][7].setPiece(new WhiteRook(7, 7));\n  }\n  generateColorMap() {\n    var colorMap = [];\n    for (let i = 0; i < this.height; i++) {\n      var row = [];\n      for (let j = 0; j < this.width; j++) {\n        if (this.fields[i][j].piece) {\n          row.push(this.fields[i][j].piece.color);\n        } else {\n          row.push(PieceColor.None);\n        }\n      }\n      colorMap.push(row);\n    }\n    this.colorMap = colorMap;\n    return colorMap;\n  }\n  constructor() {\n    this.fields = [];\n    this.width = 0;\n    this.height = 0;\n    this.anyButtonClicked = false;\n    this.markedField = null;\n    this.colorMap = null;\n    this.setBaseBoard();\n    this.setBasePosition();\n    this.colorMap = this.generateColorMap();\n  }\n}","map":{"version":3,"names":["Field","PieceColor","BlackBishop","WhiteBishop","BlackQueen","WhiteQueen","BlackRook","WhiteRook","BlackKing","WhiteKing","BlackKnight","WhiteKnight","Board","buttonClicked","height","width","checkFieldArgs","anyButtonClicked","secondButtonClicked","firstButtonClicked","markPossibleMoves","possibleMoves","pieceColor","i","length","y","x","field","fields","console","log","piece","markedPossibleMove","color","markedToCapture","canQueenSideCastle","White","canWhiteQueenCastle","Black","canBlackQueenCastle","error","alreadyMoved","markedField","colorMap","markedToMove","marked","move","unmarkButtons","capture","fieldHeight","fieldWidth","None","moveTo","Number","isInteger","setBaseBoard","nextSquareWhite","push","j","board","unmark","setBasePosition","setPiece","generateColorMap","row","constructor"],"sources":["C:\\Users\\UÅ¼ytkownik\\Desktop\\student fullstack\\studentManager\\chessboard\\src\\app\\chess\\board\\board.ts"],"sourcesContent":["import { Field } from \"../field/field\";\nimport { Piece, PieceColor } from \"../pieces/piece\";\nimport { BlackBishop } from \"../pieces/piece/infiniteRangePiece/bishop/blackBishop/black-bishop\";\nimport { WhiteBishop } from \"../pieces/piece/infiniteRangePiece/bishop/whiteBishop/white-bishop\";\nimport { BlackQueen } from \"../pieces/piece/infiniteRangePiece/queen/blackQueen/black-queen\";\nimport { WhiteQueen } from \"../pieces/piece/infiniteRangePiece/queen/whiteQueen/white-queen\";\nimport { BlackRook } from \"../pieces/piece/infiniteRangePiece/rook/blackRook/black-rook\";\nimport { WhiteRook } from \"../pieces/piece/infiniteRangePiece/rook/whiteRook/white-rook\";\nimport { BlackKing } from \"../pieces/piece/king/blackKing/black-king\";\nimport { WhiteKing } from \"../pieces/piece/king/whiteKing/white-king\";\n\nimport { BlackKnight } from \"../pieces/piece/knight/blackKnight/black-knight\";\nimport { WhiteKnight } from \"../pieces/piece/knight/whiteKnight/white-knight\";\n\n\n\nexport class Board {\n    fields: Field[][] = [];\n    width: number = 0;\n    height: number = 0;\n    anyButtonClicked: boolean = false;\n    markedField: any = null;\n    colorMap: any = null;\n    \n\n\n    buttonClicked(height: number, width: number) : void {\n        this.checkFieldArgs(height, width);\n        if (this.anyButtonClicked) {\n            this.secondButtonClicked(height, width)\n        }\n        else {\n            this.firstButtonClicked(height, width)\n        }\n    }\n\n    markPossibleMoves(possibleMoves: number[][], pieceColor : PieceColor) { \n        for (let i = 0; i < possibleMoves.length; i++) {\n            \n            var y = possibleMoves[i][0];\n            var x = possibleMoves[i][1];\n            var field = this.fields[y][x];\n            console.log('markPossible moves:', field);\n            if (field.piece == null) { field.markedPossibleMove = true;}\n            //if piece same color\n            else if  (field.piece.color != pieceColor) { field.markedToCapture = true;}\n            else { }\n        }\n    }\n\n    canQueenSideCastle(pieceColor: PieceColor): boolean {\n        if (pieceColor == PieceColor.White) { return this.canWhiteQueenCastle() }\n        else if (pieceColor == PieceColor.Black) { return this.canBlackQueenCastle() }\n        else {\n            console.error(\"given color is none\");\n        }\n        return true;\n    }\n    canBlackQueenCastle() {\n        return true;\n    }\n\n    canWhiteQueenCastle(): boolean {\n        \n        // king and rook on places\n        if (\n            !(this.fields[7][0].piece instanceof WhiteRook) ||\n            !(this.fields[7][4].piece instanceof WhiteKing)\n        ) { return false;}\n        \n        // king and rook moved\n        if (\n            this.fields[7][0].piece.alreadyMoved ||\n            this.fields[7][4].piece.alreadyMoved\n        ) { return false;}\n\n        // fields occupied\n        if (\n            this.fields[7][1].piece ||\n            this.fields[7][2].piece ||\n            this.fields[7][3].piece\n        ) { return false; }\n        \n        \n\n        return true;\n    }\n\n    firstButtonClicked(height: number, width: number) : void {\n        //mark\n        if (this.fields[height][width].piece) {\n            this.markedField = this.fields[height][width];\n            var possibleMoves = this.markedField.piece.possibleMoves(this.colorMap);\n            //console.log('possibleFields,', possibleMoves);\n            this.markPossibleMoves(possibleMoves, this.markedField.piece.color)\n            this.fields[height][width].markedToMove = true;\n            this.anyButtonClicked = true;\n        }\n    }\n\n    secondButtonClicked(height: number, width: number) : void {\n        //console.log('sec but field: ', this.fields[height][width]);\n        if (!this.fields[height][width].marked()) { }\n        if (this.fields[height][width].markedPossibleMove) {\n            this.move(height, width)\n            this.unmarkButtons();\n        }\n        else if (this.fields[height][width].markedToCapture) {\n            this.capture(height, width)\n            this.unmarkButtons();\n        }\n        else if (this.fields[height][width].markedToMove) {\n            this.unmarkButtons();\n        }\n    }\n\n    move(height: number, width: number) {\n        this.colorMap\n        [this.markedField.piece.fieldHeight]\n        [this.markedField.piece.fieldWidth] =\n            PieceColor.None;\n        this.colorMap[height][width] = this.markedField.piece.color; \n        \n        this.markedField.piece.moveTo(height, width);\n\n        this.fields[height][width].piece = this.markedField.piece;\n        console.log('new piece: ', this.fields[height][width].piece);\n        this.markedField.piece = null;\n    }\n\n    capture(height: number, width: number) {\n        this.fields[height][width].piece = null;\n        this.move(height, width);\n        console.log('color  map: ', this.colorMap);\n        \n    }\n\n    checkFieldArgs(height: number, width: number) : void {\n        if (!Number.isInteger(height) || height < 0 || height >= this.height) {\n            console.error(\" height: ${height} is invalid\", height)\n        }\n        if (!Number.isInteger(width) || width < 0 && width >= this.width) {\n            console.error(\"width: ${width} is invalid\", width)\n        }\n    }\n\n    setBaseBoard() : void {\n        this.height = 8;\n        this.width = 8;\n        var nextSquareWhite = true;\n        for (let i = 0; i < this.width; i++) {\n            this.fields.push([]);\n            for (let j = 0; j < this.height; j++) {\n                var field = new Field(nextSquareWhite, i, j);\n                field.board = this;\n                this.fields[i].push(field);\n                nextSquareWhite = !nextSquareWhite;\n            }\n            if (this.width % 2 === 0) {\n                nextSquareWhite = !nextSquareWhite;\n            }\n        }\n    }\n\n    unmarkButtons(): void {\n        this.anyButtonClicked = false;\n        for (let i = 0; i < this.height; i++) {\n            for (let j = 0; j < this.width; j++) {\n                this.fields[i][j].unmark();\n            }\n        }\n    }\n\n    setBasePosition() {\n        this.fields[0][0].setPiece(new BlackRook(0, 0));\n        this.fields[0][1].setPiece(new BlackKnight(0, 1));\n        this.fields[0][2].setPiece(new BlackBishop(0, 2));\n        this.fields[0][3].setPiece(new BlackQueen(0, 3));\n        this.fields[0][4].setPiece(new BlackKing(0, 4, this));\n        this.fields[0][5].setPiece(new BlackBishop(0, 5));\n        this.fields[0][6].setPiece(new BlackKnight(0, 6));\n        this.fields[0][7].setPiece(new BlackRook(0, 7));\n        // for (let i = 0; i < this.width; i++) { this.fields[1][i].setPiece(new BlackPawn()); }\n\n        // for (let i = 0; i < this.width; i++) { this.fields[6][i].setPiece(new WhitePawn()); }\n        \n        this.fields[7][0].setPiece(new WhiteRook(7, 0));\n        this.fields[7][1].setPiece(new WhiteKnight(7, 1));\n        this.fields[7][2].setPiece(new WhiteBishop(7, 2));\n        this.fields[7][3].setPiece(new WhiteQueen(7, 3));\n        this.fields[7][4].setPiece(new WhiteKing(7, 4, this));\n        this.fields[7][5].setPiece(new WhiteBishop(7, 5));\n        this.fields[7][6].setPiece(new WhiteKnight(7, 6));\n        this.fields[7][7].setPiece(new WhiteRook(7, 7));\n        \n\n    }\n\n    generateColorMap() {\n        var colorMap = [];\n        for (let i = 0; i < this.height; i++) {\n            var row = [];\n            for (let j = 0; j < this.width; j++) {\n                if (this.fields[i][j].piece) {\n                    row.push(this.fields[i][j].piece.color);\n                }\n                else {\n                    row.push(PieceColor.None);\n                }\n            }\n            colorMap.push(row);\n        }\n        this.colorMap = colorMap;\n        return colorMap;\n    }\n\n    constructor() {\n        this.setBaseBoard();\n        this.setBasePosition();\n        this.colorMap = this.generateColorMap();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}