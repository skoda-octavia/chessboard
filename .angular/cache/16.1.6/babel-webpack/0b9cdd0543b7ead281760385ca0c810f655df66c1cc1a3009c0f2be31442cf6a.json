{"ast":null,"code":"import { Field } from \"../field/field\";\nimport { PieceColor } from \"../pieces/piece\";\nimport { BlackKnight } from \"../pieces/piece/knight/blackKnight/black-knight\";\nimport { WhiteKnight } from \"../pieces/piece/knight/whiteKnight/white-knight\";\nexport class Board {\n  buttonClicked(height, width) {\n    this.checkFieldArgs(height, width);\n    if (this.anyButtonClicked) {\n      this.secondButtonClicked(height, width);\n    } else {\n      this.firstButtonClicked(height, width);\n    }\n  }\n  markPossibleMoves(possibleMoves, pieceColor) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      var y = possibleMoves[i][0];\n      var x = possibleMoves[i][1];\n      var field = this.fields[y][x];\n      //if no piece\n      if (field.piece == null) {\n        field.markedToMove = true;\n      }\n      //if piece same color\n      else if (field.piece.color == pieceColor) {} else {\n        field.markedToCapture == true;\n      }\n    }\n  }\n  firstButtonClicked(height, width) {\n    //mark\n    if (this.fields[height][width].piece) {\n      var possibleMoves = this.fields[height][width].piece.possibleMoves(this.colorMap);\n      console.log('possibleFields,', possibleMoves, this.colorMap);\n      this.markPossibleMoves(possibleMoves, this.fields[height][width].piece.color);\n      this.markedField = this.fields[height][width];\n      this.fields[height][width].markedToMove = true;\n      this.anyButtonClicked = true;\n    }\n  }\n  secondButtonClicked(height, width) {\n    //to do podzial na biale i czarne\n    if (!this.fields[height][width].marked() && this.fields[height][width].piece == null) {} else if (this.fields[height][width].markedToMove) {\n      //to do ruch\n      // this.move()\n      this.unmarkButtons();\n    } else if (this.fields[height][width].markedToCapture) {\n      //to do bicie albo ruch\n      // this.capture()\n      this.unmarkButtons();\n    } else if (!this.fields[height][width].marked()) {\n      this.unmarkButtons();\n      this.fields[height][width].markedToMove = true;\n      this.anyButtonClicked = true;\n    }\n  }\n  checkFieldArgs(height, width) {\n    if (!Number.isInteger(height) || height < 0 || height >= this.height) {\n      console.error(\" height: ${height} is invalid\");\n    }\n    if (!Number.isInteger(width) || width < 0 && width >= this.width) {\n      console.error(\"width: ${width} is invalid\");\n    }\n  }\n  setBaseBoard() {\n    this.height = 8;\n    this.width = 8;\n    var nextSquareWhite = true;\n    for (let i = 0; i < this.width; i++) {\n      this.fields.push([]);\n      for (let j = 0; j < this.height; j++) {\n        var field = new Field(nextSquareWhite, i, j);\n        field.board = this;\n        this.fields[i].push(field);\n        nextSquareWhite = !nextSquareWhite;\n      }\n      if (this.width % 2 === 0) {\n        nextSquareWhite = !nextSquareWhite;\n      }\n    }\n  }\n  unmarkButtons() {\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        this.fields[i][j].unmark();\n        this.anyButtonClicked = false;\n      }\n    }\n  }\n  setBasePosition() {\n    // this.fields[0][0].setPiece(new BlackRook());\n    this.fields[0][1].setPiece(new BlackKnight(0, 1));\n    // this.fields[0][2].setPiece(new BlackBishop());\n    // this.fields[0][3].setPiece(new BlackQueen());\n    // this.fields[0][4].setPiece(new BlackKing());\n    // this.fields[0][5].setPiece(new BlackBishop());\n    // this.fields[0][6].setPiece(new BlackKnight());\n    // this.fields[0][7].setPiece(new BlackRook());\n    // for (let i = 0; i < this.width; i++) { this.fields[1][i].setPiece(new BlackPawn()); }\n    // for (let i = 0; i < this.width; i++) { this.fields[6][i].setPiece(new WhitePawn()); }\n    // this.fields[7][0].setPiece(new WhiteRook());\n    this.fields[7][1].setPiece(new WhiteKnight(7, 1));\n    // this.fields[7][2].setPiece(new WhiteBishop());\n    // this.fields[7][3].setPiece(new WhiteQueen());\n    // this.fields[7][4].setPiece(new Whiteking());\n    // this.fields[7][5].setPiece(new WhiteBishop());\n    // this.fields[7][6].setPiece(new WhiteKnight());\n    // this.fields[7][7].setPiece(new WhiteRook());\n  }\n\n  generateColorMap() {\n    var colorMap = new Array(this.height).fill([]);\n    for (let i = 0; i < this.width; i++) {\n      colorMap.push([]);\n      for (let j = 0; j < this.height; j++) {\n        if (this.fields[i][j].piece) {\n          var color;\n          color = this.fields[i][j].piece.color;\n          colorMap[i].push(color);\n        } else {\n          colorMap[i].push(PieceColor.None);\n        }\n      }\n    }\n    this.colorMap = colorMap;\n    return colorMap;\n  }\n  constructor() {\n    this.fields = [];\n    this.width = 0;\n    this.height = 0;\n    this.anyButtonClicked = false;\n    this.markedField = null;\n    this.colorMap = null;\n    this.setBaseBoard();\n    this.setBasePosition();\n    this.colorMap = this.generateColorMap();\n  }\n}","map":{"version":3,"names":["Field","PieceColor","BlackKnight","WhiteKnight","Board","buttonClicked","height","width","checkFieldArgs","anyButtonClicked","secondButtonClicked","firstButtonClicked","markPossibleMoves","possibleMoves","pieceColor","i","length","y","x","field","fields","piece","markedToMove","color","markedToCapture","colorMap","console","log","markedField","marked","unmarkButtons","Number","isInteger","error","setBaseBoard","nextSquareWhite","push","j","board","unmark","setBasePosition","setPiece","generateColorMap","Array","fill","None","constructor"],"sources":["C:\\Users\\UÅ¼ytkownik\\Desktop\\student fullstack\\studentManager\\src\\app\\chess\\board\\board.ts"],"sourcesContent":["import { Field } from \"../field/field\";\nimport { Piece, PieceColor } from \"../pieces/piece\";\nimport { BlackKnight } from \"../pieces/piece/knight/blackKnight/black-knight\";\nimport { WhiteKnight } from \"../pieces/piece/knight/whiteKnight/white-knight\";\n\n\nexport class Board {\n    fields: Field[][] = [];\n    width: number = 0;\n    height: number = 0;\n    anyButtonClicked: boolean = false;\n    markedField: any = null;\n    colorMap: any = null;\n\n\n    buttonClicked(height: number, width: number) : void {\n        this.checkFieldArgs(height, width);\n        if (this.anyButtonClicked) {\n            this.secondButtonClicked(height, width)\n        }\n        else {\n            this.firstButtonClicked(height, width)\n        }\n    }\n\n    markPossibleMoves(possibleMoves: number[][], pieceColor : PieceColor) { \n        for (let i = 0; i < possibleMoves.length; i++) {\n            \n            var y = possibleMoves[i][0];\n            var x = possibleMoves[i][1];\n            var field = this.fields[y][x];\n            \n            //if no piece\n            if (field.piece == null) { field.markedToMove = true;}\n            //if piece same color\n            else if (field.piece.color == pieceColor) { }\n            else { field.markedToCapture == true;}\n            }\n    }\n\n\n    firstButtonClicked(height: number, width: number) : void {\n        //mark\n        if (this.fields[height][width].piece) {\n            var possibleMoves = this.fields[height][width].piece.possibleMoves(this.colorMap);\n            console.log('possibleFields,', possibleMoves, this.colorMap);\n            this.markPossibleMoves(possibleMoves, this.fields[height][width].piece.color)\n            this.markedField = this.fields[height][width];\n            this.fields[height][width].markedToMove = true;\n            this.anyButtonClicked = true;\n        }\n    }\n\n    secondButtonClicked(height: number, width: number) : void {\n        //to do podzial na biale i czarne\n        if (!this.fields[height][width].marked() && this.fields[height][width].piece == null) { }\n        else if (this.fields[height][width].markedToMove) {\n            //to do ruch\n            // this.move()\n            this.unmarkButtons();\n        }\n        else if (this.fields[height][width].markedToCapture) {\n            //to do bicie albo ruch\n            // this.capture()\n            this.unmarkButtons();\n        }\n        else if (!this.fields[height][width].marked()) {\n            this.unmarkButtons();\n            this.fields[height][width].markedToMove = true;\n            this.anyButtonClicked = true;\n        }\n    }\n\n    checkFieldArgs(height: number, width: number) : void {\n        if (!Number.isInteger(height) || height < 0 || height >= this.height) {\n            console.error(\" height: ${height} is invalid\")\n        }\n        if (!Number.isInteger(width) || width < 0 && width >= this.width) {\n            console.error(\"width: ${width} is invalid\")\n        }\n    }\n\n    setBaseBoard() : void {\n        this.height = 8;\n        this.width = 8;\n        var nextSquareWhite = true;\n        for (let i = 0; i < this.width; i++) {\n            this.fields.push([]);\n            for (let j = 0; j < this.height; j++) {\n                var field = new Field(nextSquareWhite, i, j);\n                field.board = this;\n                this.fields[i].push(field);\n                nextSquareWhite = !nextSquareWhite;\n            }\n            if (this.width % 2 === 0) {\n                nextSquareWhite = !nextSquareWhite;\n            }\n        }\n    }\n\n    unmarkButtons() : void {\n        for (let i = 0; i < this.width; i++) {\n            for (let j = 0; j < this.height; j++) {\n                this.fields[i][j].unmark();\n                this.anyButtonClicked = false;\n            }\n        }\n    }\n\n    setBasePosition() {\n        // this.fields[0][0].setPiece(new BlackRook());\n        this.fields[0][1].setPiece(new BlackKnight(0, 1));\n        // this.fields[0][2].setPiece(new BlackBishop());\n        // this.fields[0][3].setPiece(new BlackQueen());\n        // this.fields[0][4].setPiece(new BlackKing());\n        // this.fields[0][5].setPiece(new BlackBishop());\n        // this.fields[0][6].setPiece(new BlackKnight());\n        // this.fields[0][7].setPiece(new BlackRook());\n        // for (let i = 0; i < this.width; i++) { this.fields[1][i].setPiece(new BlackPawn()); }\n\n        // for (let i = 0; i < this.width; i++) { this.fields[6][i].setPiece(new WhitePawn()); }\n        \n        // this.fields[7][0].setPiece(new WhiteRook());\n        this.fields[7][1].setPiece(new WhiteKnight(7, 1));\n        // this.fields[7][2].setPiece(new WhiteBishop());\n        // this.fields[7][3].setPiece(new WhiteQueen());\n        // this.fields[7][4].setPiece(new Whiteking());\n        // this.fields[7][5].setPiece(new WhiteBishop());\n        // this.fields[7][6].setPiece(new WhiteKnight());\n        // this.fields[7][7].setPiece(new WhiteRook());\n        \n\n    }\n\n    generateColorMap(): PieceColor[][] {\n        var colorMap = new Array(this.height).fill([]);\n        for (let i = 0; i < this.width; i++) {\n            colorMap.push([])\n            for (let j = 0; j < this.height; j++) {\n                if (this.fields[i][j].piece) {\n                    var color: PieceColor;\n                    color = this.fields[i][j].piece.color;\n                    colorMap[i].push(color);\n                }\n                else {\n                    colorMap[i].push(PieceColor.None);\n                }\n            }\n        }\n        this.colorMap = colorMap;\n        return colorMap;\n    }\n\n    constructor() {\n        this.setBaseBoard();\n        this.setBasePosition();\n        this.colorMap = this.generateColorMap();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}