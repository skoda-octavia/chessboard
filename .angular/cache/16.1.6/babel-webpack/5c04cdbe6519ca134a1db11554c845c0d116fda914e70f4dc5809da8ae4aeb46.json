{"ast":null,"code":"import { Piece, PieceColor } from \"../../piece\";\nexport class Bishop extends Piece {\n  possibleBishopMoves(colorBoard, fieldHeight, fieldWidth, pieceColor) {\n    var boardWidth = colorBoard[0].length;\n    var boardHeight = colorBoard.length;\n    var possibleMoves = [];\n    var diagonals = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n    for (let i = 0; i < diagonals.length; i++) {\n      var changeY = diagonals[i][0];\n      var changeX = diagonals[i][1];\n      var tempY = fieldHeight + changeY;\n      var tempX = fieldWidth + changeX;\n      while (this.correctField(boardHeight, boardWidth, tempY, tempX)) {\n        var tempColor = colorBoard[tempY][tempX];\n        if (tempColor == pieceColor) {\n          break;\n        } else if (tempColor == PieceColor.None) {\n          possibleMoves.push([tempY, tempX]);\n          tempY += changeY;\n          tempX += changeX;\n        } else {\n          possibleMoves.push([tempY, tempX]);\n          tempY += changeY;\n          tempX += changeX;\n          break;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n  possibleMoves(colorBoard) {\n    return this.possibleBishopMoves(colorBoard, this.fieldHeight, this.fieldWidth, this.color);\n  }\n  constructor(fieldHeight, fieldWidth) {\n    super(fieldHeight, fieldWidth);\n  }\n}","map":{"version":3,"names":["Piece","PieceColor","Bishop","possibleBishopMoves","colorBoard","fieldHeight","fieldWidth","pieceColor","boardWidth","length","boardHeight","possibleMoves","diagonals","i","changeY","changeX","tempY","tempX","correctField","tempColor","None","push","color","constructor"],"sources":["C:\\Users\\UÅ¼ytkownik\\Desktop\\student fullstack\\studentManager\\src\\app\\chess\\pieces\\piece\\bishop\\bishop.ts"],"sourcesContent":["import { Piece, PieceColor } from \"../../piece\";\n\nexport abstract class Bishop extends Piece {\n    \n    possibleBishopMoves(colorBoard: PieceColor[][], fieldHeight: number, fieldWidth: number, pieceColor: PieceColor): number[][] {\n\n        var boardWidth = colorBoard[0].length;\n        var boardHeight = colorBoard.length;\n        var possibleMoves = [];\n        var diagonals = [\n            [-1, -1],\n            [-1, 1],\n            [1, -1],\n            [1, 1]\n        ]\n        for (let i = 0; i < diagonals.length; i++) {\n            var changeY = diagonals[i][0];\n            var changeX = diagonals[i][1];\n\n            var tempY = fieldHeight + changeY;\n            var tempX = fieldWidth + changeX;\n\n            while (this.correctField(boardHeight, boardWidth, tempY, tempX)) {\n                var tempColor = colorBoard[tempY][tempX];\n                if (tempColor == pieceColor) { break }\n                else if (tempColor == PieceColor.None) {\n                    possibleMoves.push([tempY, tempX]);\n                    tempY += changeY;\n                    tempX += changeX;\n                }\n                else {\n                    possibleMoves.push([tempY, tempX]);\n                    tempY += changeY;\n                    tempX += changeX;\n                    break;\n                }\n            }\n        }\n        return possibleMoves;\n    \n    }\n\n    possibleMoves(colorBoard: PieceColor[][]): number[][] {\n        return this.possibleBishopMoves(colorBoard, this.fieldHeight, this.fieldWidth, this.color);\n\n    }\n\n    constructor(fieldHeight: number, fieldWidth: number) {\n        super(fieldHeight, fieldWidth);\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,UAAU,QAAQ,aAAa;AAE/C,OAAM,MAAgBC,MAAO,SAAQF,KAAK;EAEtCG,mBAAmBA,CAACC,UAA0B,EAAEC,WAAmB,EAAEC,UAAkB,EAAEC,UAAsB;IAE3G,IAAIC,UAAU,GAAGJ,UAAU,CAAC,CAAC,CAAC,CAACK,MAAM;IACrC,IAAIC,WAAW,GAAGN,UAAU,CAACK,MAAM;IACnC,IAAIE,aAAa,GAAG,EAAE;IACtB,IAAIC,SAAS,GAAG,CACZ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACR,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CACT;IACD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACH,MAAM,EAAEI,CAAC,EAAE,EAAE;MACvC,IAAIC,OAAO,GAAGF,SAAS,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7B,IAAIE,OAAO,GAAGH,SAAS,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC;MAE7B,IAAIG,KAAK,GAAGX,WAAW,GAAGS,OAAO;MACjC,IAAIG,KAAK,GAAGX,UAAU,GAAGS,OAAO;MAEhC,OAAO,IAAI,CAACG,YAAY,CAACR,WAAW,EAAEF,UAAU,EAAEQ,KAAK,EAAEC,KAAK,CAAC,EAAE;QAC7D,IAAIE,SAAS,GAAGf,UAAU,CAACY,KAAK,CAAC,CAACC,KAAK,CAAC;QACxC,IAAIE,SAAS,IAAIZ,UAAU,EAAE;UAAE;SAAO,MACjC,IAAIY,SAAS,IAAIlB,UAAU,CAACmB,IAAI,EAAE;UACnCT,aAAa,CAACU,IAAI,CAAC,CAACL,KAAK,EAAEC,KAAK,CAAC,CAAC;UAClCD,KAAK,IAAIF,OAAO;UAChBG,KAAK,IAAIF,OAAO;SACnB,MACI;UACDJ,aAAa,CAACU,IAAI,CAAC,CAACL,KAAK,EAAEC,KAAK,CAAC,CAAC;UAClCD,KAAK,IAAIF,OAAO;UAChBG,KAAK,IAAIF,OAAO;UAChB;;;;IAIZ,OAAOJ,aAAa;EAExB;EAEAA,aAAaA,CAACP,UAA0B;IACpC,OAAO,IAAI,CAACD,mBAAmB,CAACC,UAAU,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAACgB,KAAK,CAAC;EAE9F;EAEAC,YAAYlB,WAAmB,EAAEC,UAAkB;IAC/C,KAAK,CAACD,WAAW,EAAEC,UAAU,CAAC;EAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}