{"ast":null,"code":"import { Field } from \"../field/field\";\nimport { PieceColor } from \"../pieces/piece\";\nimport { BlackBishop } from \"../pieces/piece/infiniteRangePiece/bishop/blackBishop/black-bishop\";\nimport { WhiteBishop } from \"../pieces/piece/infiniteRangePiece/bishop/whiteBishop/white-bishop\";\nimport { BlackQueen } from \"../pieces/piece/infiniteRangePiece/queen/blackQueen/black-queen\";\nimport { WhiteQueen } from \"../pieces/piece/infiniteRangePiece/queen/whiteQueen/white-queen\";\nimport { BlackRook } from \"../pieces/piece/infiniteRangePiece/rook/blackRook/black-rook\";\nimport { WhiteRook } from \"../pieces/piece/infiniteRangePiece/rook/whiteRook/white-rook\";\nimport { BlackKing } from \"../pieces/piece/king/blackKing/black-king\";\nimport { WhiteKing } from \"../pieces/piece/king/whiteKing/white-king\";\nimport { BlackKnight } from \"../pieces/piece/knight/blackKnight/black-knight\";\nimport { WhiteKnight } from \"../pieces/piece/knight/whiteKnight/white-knight\";\nimport { CastlingOperator } from \"./castling-operator\";\nexport class Board {\n  changeMovingColor() {\n    if (this.movingColor == PieceColor.White) {\n      this.movingColor = PieceColor.Black;\n    } else if (this.movingColor == PieceColor.Black) {\n      this.movingColor = PieceColor.White;\n    } else {\n      console.error(\"error while changing movingColor\");\n    }\n  }\n  buttonClicked(height, width) {\n    this.checkFieldArgs(height, width);\n    if (this.anyButtonClicked) {\n      this.secondButtonClicked(height, width);\n    } else {\n      this.firstButtonClicked(height, width);\n    }\n  }\n  markPossibleMoves(possibleMoves, pieceColor) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      var y = possibleMoves[i][0];\n      var x = possibleMoves[i][1];\n      var field = this.fields[y][x];\n      if (field.piece == null) {\n        field.markedPossibleMove = true;\n      }\n      //if piece same color\n      else if (field.piece.color != pieceColor) {\n        field.markedToCapture = true;\n      } else {}\n    }\n  }\n  firstButtonClicked(height, width) {\n    //mark\n    if (this.fields[height][width].piece && this.fields[height][width].piece.color == this.movingColor) {\n      this.markedField = this.fields[height][width];\n      var possibleMoves = this.markedField.piece.possibleMoves(this.colorMap);\n      this.markPossibleMoves(possibleMoves, this.markedField.piece.color);\n      this.fields[height][width].markedToMove = true;\n      this.anyButtonClicked = true;\n    }\n  }\n  secondButtonClicked(height, width) {\n    //console.log('sec but field: ', this.fields[height][width]);\n    if (!this.fields[height][width].marked()) {}\n    if (this.fields[height][width].markedPossibleMove) {\n      this.move(height, width);\n      this.unmarkButtons();\n    } else if (this.fields[height][width].markedToCapture) {\n      this.capture(height, width);\n      this.unmarkButtons();\n    } else if (this.fields[height][width].markedToMove) {\n      this.unmarkButtons();\n    }\n  }\n  fieldsControled(byColor) {\n    var controlledFields = new Set();\n    var tempPiece;\n    for (let i = 0; i < this.fields.length; i++) {\n      for (let j = 0; j < this.fields[0].length; j++) {\n        if (this.fields[i][j].piece) {\n          tempPiece = this.fields[i][j].piece;\n          if (tempPiece.color == byColor) {\n            var possibleMoves = tempPiece.possibleMoves(this.colorMap);\n            for (const field of possibleMoves) {\n              var fieldHeight = field[0];\n              var fieldWidth = field[1];\n              controlledFields.add(this.fields[fieldHeight][fieldWidth]);\n            }\n          }\n        }\n      }\n    }\n    return controlledFields;\n  }\n  unmarkButtons() {\n    this.anyButtonClicked = false;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        this.fields[i][j].unmark();\n      }\n    }\n  }\n  possibleCastlingMoves(color) {\n    this.generateColorMap();\n    switch (color) {\n      case PieceColor.White:\n        return this.castlingOperator.possibleWhiteCastlings();\n      case PieceColor.Black:\n        return this.castlingOperator.possibleBlackCastlings();\n      default:\n        console.error(\"invalid color in possibleCastlingMoves\");\n    }\n    return [[]];\n  }\n  move(height, width) {\n    this.colorMap[this.markedField.piece.fieldHeight][this.markedField.piece.fieldWidth] = PieceColor.None;\n    this.colorMap[height][width] = this.markedField.piece.color;\n    this.markedField.piece.moveTo(height, width);\n    this.fields[height][width].piece = this.markedField.piece;\n    this.markedField.piece = null;\n    this.changeMovingColor();\n    this.markCheck();\n    console.log(\"board\", this);\n  }\n  capture(height, width) {\n    this.fields[height][width].piece = null;\n    this.move(height, width);\n    this.markCheck();\n    console.log(\"board\", this);\n  }\n  markCheck() {\n    var fieldsControlledByWhite = this.fieldsControled(PieceColor.White);\n    var blackKingHeight = this.blackKing.fieldHeight;\n    var blackKingWidth = this.blackKing.fieldWidth;\n    var blackKingField = this.fields[blackKingHeight][blackKingWidth];\n    if (fieldsControlledByWhite.has(blackKingField)) {\n      this.blackInCheck = true;\n    } else {\n      this.blackInCheck = false;\n    }\n    var fieldsControlledByBlack = this.fieldsControled(PieceColor.Black);\n    var whiteKingHeight = this.whiteKing.fieldHeight;\n    var whiteKingWidth = this.whiteKing.fieldWidth;\n    var whiteKingField = this.fields[whiteKingHeight][whiteKingWidth];\n    if (fieldsControlledByBlack.has(whiteKingField)) {\n      this.whiteInCheck = true;\n    } else {\n      this.whiteInCheck = false;\n    }\n  }\n  checkFieldArgs(height, width) {\n    if (!Number.isInteger(height) || height < 0 || height >= this.height) {\n      console.error(\" height: ${height} is invalid\", height);\n    }\n    if (!Number.isInteger(width) || width < 0 && width >= this.width) {\n      console.error(\"width: ${width} is invalid\", width);\n    }\n  }\n  setBaseBoard() {\n    this.height = 8;\n    this.width = 8;\n    var nextSquareWhite = true;\n    for (let i = 0; i < this.width; i++) {\n      this.fields.push([]);\n      for (let j = 0; j < this.height; j++) {\n        var field = new Field(nextSquareWhite, i, j);\n        field.board = this;\n        this.fields[i].push(field);\n        nextSquareWhite = !nextSquareWhite;\n      }\n      if (this.width % 2 === 0) {\n        nextSquareWhite = !nextSquareWhite;\n      }\n    }\n  }\n  setBasePosition() {\n    this.fields[0][0].setPiece(new BlackRook(0, 0));\n    this.fields[0][1].setPiece(new BlackKnight(0, 1));\n    this.fields[0][2].setPiece(new BlackBishop(0, 2));\n    this.fields[0][3].setPiece(new BlackQueen(0, 3));\n    this.fields[0][4].setPiece(new BlackKing(0, 4, this));\n    this.blackKing = this.fields[0][4].piece;\n    this.fields[0][5].setPiece(new BlackBishop(0, 5));\n    this.fields[0][6].setPiece(new BlackKnight(0, 6));\n    this.fields[0][7].setPiece(new BlackRook(0, 7));\n    // for (let i = 0; i < this.width; i++) { this.fields[1][i].setPiece(new BlackPawn()); }\n    // for (let i = 0; i < this.width; i++) { this.fields[6][i].setPiece(new WhitePawn()); }\n    this.fields[7][0].setPiece(new WhiteRook(7, 0));\n    this.fields[7][1].setPiece(new WhiteKnight(7, 1));\n    this.fields[7][2].setPiece(new WhiteBishop(7, 2));\n    this.fields[7][3].setPiece(new WhiteQueen(7, 3));\n    this.fields[7][4].setPiece(new WhiteKing(7, 4, this));\n    this.whiteKing = this.fields[7][4].piece;\n    this.fields[7][5].setPiece(new WhiteBishop(7, 5));\n    this.fields[7][6].setPiece(new WhiteKnight(7, 6));\n    this.fields[7][7].setPiece(new WhiteRook(7, 7));\n  }\n  generateColorMap() {\n    var colorMap = [];\n    for (let i = 0; i < this.height; i++) {\n      var row = [];\n      for (let j = 0; j < this.width; j++) {\n        if (this.fields[i][j].piece) {\n          row.push(this.fields[i][j].piece.color);\n        } else {\n          row.push(PieceColor.None);\n        }\n      }\n      colorMap.push(row);\n    }\n    this.colorMap = colorMap;\n    return colorMap;\n  }\n  constructor() {\n    this.fields = [];\n    this.width = 0;\n    this.height = 0;\n    this.anyButtonClicked = false;\n    this.markedField = null;\n    this.colorMap = null;\n    this.whiteInCheck = true;\n    this.blackInCheck = true;\n    this.whiteKing = null;\n    this.blackKing = null;\n    this.movingColor = PieceColor.White;\n    this.setBaseBoard();\n    this.setBasePosition();\n    this.colorMap = this.generateColorMap();\n    this.castlingOperator = new CastlingOperator(this.fields, this);\n  }\n}","map":{"version":3,"names":["Field","PieceColor","BlackBishop","WhiteBishop","BlackQueen","WhiteQueen","BlackRook","WhiteRook","BlackKing","WhiteKing","BlackKnight","WhiteKnight","CastlingOperator","Board","changeMovingColor","movingColor","White","Black","console","error","buttonClicked","height","width","checkFieldArgs","anyButtonClicked","secondButtonClicked","firstButtonClicked","markPossibleMoves","possibleMoves","pieceColor","i","length","y","x","field","fields","piece","markedPossibleMove","color","markedToCapture","markedField","colorMap","markedToMove","marked","move","unmarkButtons","capture","fieldsControled","byColor","controlledFields","Set","tempPiece","j","fieldHeight","fieldWidth","add","unmark","possibleCastlingMoves","generateColorMap","castlingOperator","possibleWhiteCastlings","possibleBlackCastlings","None","moveTo","markCheck","log","fieldsControlledByWhite","blackKingHeight","blackKing","blackKingWidth","blackKingField","has","blackInCheck","fieldsControlledByBlack","whiteKingHeight","whiteKing","whiteKingWidth","whiteKingField","whiteInCheck","Number","isInteger","setBaseBoard","nextSquareWhite","push","board","setBasePosition","setPiece","row","constructor"],"sources":["C:\\Users\\UÅ¼ytkownik\\Desktop\\student fullstack\\studentManager\\chessboard\\src\\app\\chess\\board\\board.ts"],"sourcesContent":["import { Field } from \"../field/field\";\r\nimport { Piece, PieceColor } from \"../pieces/piece\";\r\nimport { BlackBishop } from \"../pieces/piece/infiniteRangePiece/bishop/blackBishop/black-bishop\";\r\nimport { WhiteBishop } from \"../pieces/piece/infiniteRangePiece/bishop/whiteBishop/white-bishop\";\r\nimport { BlackQueen } from \"../pieces/piece/infiniteRangePiece/queen/blackQueen/black-queen\";\r\nimport { WhiteQueen } from \"../pieces/piece/infiniteRangePiece/queen/whiteQueen/white-queen\";\r\nimport { BlackRook } from \"../pieces/piece/infiniteRangePiece/rook/blackRook/black-rook\";\r\nimport { WhiteRook } from \"../pieces/piece/infiniteRangePiece/rook/whiteRook/white-rook\";\r\nimport { BlackKing } from \"../pieces/piece/king/blackKing/black-king\";\r\nimport { WhiteKing } from \"../pieces/piece/king/whiteKing/white-king\";\r\n\r\nimport { BlackKnight } from \"../pieces/piece/knight/blackKnight/black-knight\";\r\nimport { WhiteKnight } from \"../pieces/piece/knight/whiteKnight/white-knight\";\r\nimport { CastlingOperator } from \"./castling-operator\";\r\n\r\n\r\n\r\nexport class Board {\r\n    castlingOperator: CastlingOperator;\r\n    fields: Field[][] = [];\r\n    width: number = 0;\r\n    height: number = 0;\r\n    anyButtonClicked: boolean = false;\r\n    markedField: any = null;\r\n    colorMap: any = null;\r\n    whiteInCheck: boolean = true;\r\n    blackInCheck: boolean = true;\r\n    whiteKing: any = null;\r\n    blackKing: any = null;\r\n    movingColor: PieceColor = PieceColor.White;\r\n\r\n\r\n    changeMovingColor(): void {\r\n        if (this.movingColor == PieceColor.White) { this.movingColor = PieceColor.Black }\r\n        else if (this.movingColor == PieceColor.Black) { this.movingColor = PieceColor.White }\r\n        else {\r\n            console.error(\"error while changing movingColor\")\r\n        }\r\n    }\r\n\r\n\r\n    buttonClicked(height: number, width: number) : void {\r\n        this.checkFieldArgs(height, width);\r\n        if (this.anyButtonClicked) {\r\n            this.secondButtonClicked(height, width)\r\n        }\r\n        else {\r\n            this.firstButtonClicked(height, width)\r\n        }\r\n    }\r\n\r\n    markPossibleMoves(possibleMoves: number[][], pieceColor : PieceColor) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n\r\n            var y = possibleMoves[i][0];\r\n            var x = possibleMoves[i][1];\r\n            var field = this.fields[y][x];\r\n\r\n            if (field.piece == null) { field.markedPossibleMove = true;}\r\n            //if piece same color\r\n            else if  (field.piece.color != pieceColor) { field.markedToCapture = true;}\r\n            else { }\r\n        }\r\n    }\r\n\r\n    firstButtonClicked(height: number, width: number) : void {\r\n        //mark\r\n        if (this.fields[height][width].piece && this.fields[height][width].piece.color == this.movingColor) {\r\n            this.markedField = this.fields[height][width];\r\n            var possibleMoves = this.markedField.piece.possibleMoves(this.colorMap);\r\n            \r\n            this.markPossibleMoves(possibleMoves, this.markedField.piece.color)\r\n            this.fields[height][width].markedToMove = true;\r\n            this.anyButtonClicked = true;\r\n        }\r\n    }\r\n\r\n    secondButtonClicked(height: number, width: number) : void {\r\n        //console.log('sec but field: ', this.fields[height][width]);\r\n        if (!this.fields[height][width].marked()) { }\r\n        if (this.fields[height][width].markedPossibleMove) {\r\n            this.move(height, width)\r\n            this.unmarkButtons();\r\n        }\r\n        else if (this.fields[height][width].markedToCapture) {\r\n            this.capture(height, width)\r\n            this.unmarkButtons();\r\n        }\r\n        else if (this.fields[height][width].markedToMove) {\r\n            this.unmarkButtons();\r\n        }\r\n    }\r\n\r\n    fieldsControled(byColor: PieceColor): Set<Field> {\r\n        var controlledFields = new Set<Field>()\r\n        var tempPiece;\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n            for (let j = 0; j < this.fields[0].length; j++) {\r\n                if (this.fields[i][j].piece) {\r\n                    tempPiece = this.fields[i][j].piece;\r\n                    if (tempPiece.color == byColor) {\r\n                        var possibleMoves = tempPiece.possibleMoves(this.colorMap);\r\n                        for (const field of possibleMoves) {\r\n                            var fieldHeight = field[0]\r\n                            var fieldWidth = field[1]\r\n                            controlledFields.add(this.fields[fieldHeight][fieldWidth]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return controlledFields\r\n    }\r\n\r\n    unmarkButtons(): void {\r\n        this.anyButtonClicked = false;\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.fields[i][j].unmark();\r\n            }\r\n        }\r\n    }\r\n\r\n    possibleCastlingMoves(color: PieceColor) : number[][] {\r\n        this.generateColorMap();\r\n        \r\n        switch (color) {\r\n            case PieceColor.White:\r\n                return this.castlingOperator.possibleWhiteCastlings();\r\n\r\n            case PieceColor.Black:\r\n                return this.castlingOperator.possibleBlackCastlings();\r\n            default:\r\n                console.error(\"invalid color in possibleCastlingMoves\")\r\n            }\r\n        return [[]];\r\n    }\r\n\r\n    move(height: number, width: number) {\r\n        this.colorMap\r\n        [this.markedField.piece.fieldHeight]\r\n        [this.markedField.piece.fieldWidth] =\r\n            PieceColor.None;\r\n        this.colorMap[height][width] = this.markedField.piece.color;\r\n\r\n        this.markedField.piece.moveTo(height, width);\r\n\r\n        this.fields[height][width].piece = this.markedField.piece;\r\n        this.markedField.piece = null;\r\n\r\n        this.changeMovingColor()\r\n        this.markCheck()\r\n\r\n        console.log(\"board\", this)\r\n\r\n    }\r\n\r\n    capture(height: number, width: number) {\r\n        this.fields[height][width].piece = null;\r\n        this.move(height, width);\r\n\r\n        this.markCheck()\r\n\r\n        console.log(\"board\", this)\r\n\r\n    }\r\n\r\n\r\n    markCheck() {\r\n        var fieldsControlledByWhite = this.fieldsControled(PieceColor.White)\r\n        var blackKingHeight = this.blackKing.fieldHeight\r\n        var blackKingWidth = this.blackKing.fieldWidth\r\n        var blackKingField = this.fields[blackKingHeight][blackKingWidth]\r\n        if (fieldsControlledByWhite.has(blackKingField)) { this.blackInCheck = true }\r\n        else { this.blackInCheck = false }\r\n        \r\n        var fieldsControlledByBlack = this.fieldsControled(PieceColor.Black)\r\n        var whiteKingHeight = this.whiteKing.fieldHeight\r\n        var whiteKingWidth = this.whiteKing.fieldWidth\r\n        var whiteKingField = this.fields[whiteKingHeight][whiteKingWidth]\r\n        if (fieldsControlledByBlack.has(whiteKingField)) { this.whiteInCheck = true }\r\n        else { this.whiteInCheck = false }\r\n        \r\n    }\r\n\r\n    checkFieldArgs(height: number, width: number) : void {\r\n        if (!Number.isInteger(height) || height < 0 || height >= this.height) {\r\n            console.error(\" height: ${height} is invalid\", height)\r\n        }\r\n        if (!Number.isInteger(width) || width < 0 && width >= this.width) {\r\n            console.error(\"width: ${width} is invalid\", width)\r\n        }\r\n    }\r\n\r\n    setBaseBoard() : void {\r\n        this.height = 8;\r\n        this.width = 8;\r\n        var nextSquareWhite = true;\r\n        for (let i = 0; i < this.width; i++) {\r\n            this.fields.push([]);\r\n            for (let j = 0; j < this.height; j++) {\r\n                var field = new Field(nextSquareWhite, i, j);\r\n                field.board = this;\r\n                this.fields[i].push(field);\r\n                nextSquareWhite = !nextSquareWhite;\r\n            }\r\n            if (this.width % 2 === 0) {\r\n                nextSquareWhite = !nextSquareWhite;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    setBasePosition() {\r\n        this.fields[0][0].setPiece(new BlackRook(0, 0));\r\n        this.fields[0][1].setPiece(new BlackKnight(0, 1));\r\n        this.fields[0][2].setPiece(new BlackBishop(0, 2));\r\n        this.fields[0][3].setPiece(new BlackQueen(0, 3));\r\n        this.fields[0][4].setPiece(new BlackKing(0, 4, this));\r\n        this.blackKing = this.fields[0][4].piece\r\n\r\n        this.fields[0][5].setPiece(new BlackBishop(0, 5));\r\n        this.fields[0][6].setPiece(new BlackKnight(0, 6));\r\n        this.fields[0][7].setPiece(new BlackRook(0, 7));\r\n        // for (let i = 0; i < this.width; i++) { this.fields[1][i].setPiece(new BlackPawn()); }\r\n\r\n        // for (let i = 0; i < this.width; i++) { this.fields[6][i].setPiece(new WhitePawn()); }\r\n\r\n        this.fields[7][0].setPiece(new WhiteRook(7, 0));\r\n        this.fields[7][1].setPiece(new WhiteKnight(7, 1));\r\n        this.fields[7][2].setPiece(new WhiteBishop(7, 2));\r\n        this.fields[7][3].setPiece(new WhiteQueen(7, 3));\r\n        this.fields[7][4].setPiece(new WhiteKing(7, 4, this));\r\n        this.whiteKing = this.fields[7][4].piece;\r\n\r\n        this.fields[7][5].setPiece(new WhiteBishop(7, 5));\r\n        this.fields[7][6].setPiece(new WhiteKnight(7, 6));\r\n        this.fields[7][7].setPiece(new WhiteRook(7, 7));\r\n\r\n\r\n    }\r\n\r\n    generateColorMap() {\r\n        var colorMap = [];\r\n        for (let i = 0; i < this.height; i++) {\r\n            var row = [];\r\n            for (let j = 0; j < this.width; j++) {\r\n                if (this.fields[i][j].piece) {\r\n                    row.push(this.fields[i][j].piece.color);\r\n                }\r\n                else {\r\n                    row.push(PieceColor.None);\r\n                }\r\n            }\r\n            colorMap.push(row);\r\n        }\r\n        this.colorMap = colorMap;\r\n        return colorMap;\r\n    }\r\n\r\n    constructor() {\r\n        this.setBaseBoard();\r\n        this.setBasePosition();\r\n        this.colorMap = this.generateColorMap();\r\n        this.castlingOperator = new CastlingOperator(this.fields, this);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}