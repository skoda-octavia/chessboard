{"ast":null,"code":"import { Field } from \"../field/field\";\nimport { BlackBishop } from \"../pieces/piece/blackBishop/black-bishop\";\nimport { BlackKing } from \"../pieces/piece/blackKing/black-king\";\nimport { BlackKnight } from \"../pieces/piece/blackKnight/black-knight\";\nimport { BlackPawn } from \"../pieces/piece/blackPawn/black-pawn\";\nimport { BlackQueen } from \"../pieces/piece/blackQueen/black-queen\";\nimport { BlackRook } from \"../pieces/piece/blackRook/black-rook\";\nimport { WhiteBishop } from \"../pieces/piece/whiteBishop/white-bishop\";\nimport { Whiteking } from \"../pieces/piece/whiteKing/whiteking\";\nimport { WhiteKnight } from \"../pieces/piece/whiteKnight/white-knight\";\nimport { WhitePawn } from \"../pieces/piece/whitePawn/white-pawn\";\nimport { WhiteQueen } from \"../pieces/piece/whiteQueen/white-queen\";\nimport { WhiteRook } from \"../pieces/piece/whiteRook/white-rook\";\nexport class Board {\n  buttonClicked(height, width) {\n    this.checkFieldArgs(height, width);\n    if (this.anyButtonClicked) {\n      this.secondButtonClicked(height, width);\n    } else {\n      this.firstButtonClicked(height, width);\n    }\n  }\n  firstButtonClicked(height, width) {\n    //mark\n    if (this.fields[height][width].piece) {\n      //to do zaznacz pola mozliwe\n      this.markedField = this.fields[height][width];\n      this.fields[height][width].markedToMove = true;\n      this.anyButtonClicked = true;\n    }\n  }\n  secondButtonClicked(height, width) {\n    //to do podzial na biale i czarne\n    if (!this.fields[height][width].marked() && this.fields[height][width].piece == null) {} else if (this.fields[height][width].markedToMove) {\n      //to do ruch\n      // this.move()\n      this.unmarkButtons();\n    } else if (this.fields[height][width].markedToCapture) {\n      //to do bicie albo ruch\n      // this.capture()\n      this.unmarkButtons();\n    } else if (!this.fields[height][width].marked) {\n      this.unmarkButtons();\n      this.fields[height][width].marked = true;\n      this.anyButtonClicked = true;\n    }\n  }\n  checkFieldArgs(height, width) {\n    if (!Number.isInteger(height) || height < 0 || height >= this.height) {\n      console.error(\" height: ${height} is invalid\");\n    }\n    if (!Number.isInteger(width) || width < 0 && width >= this.width) {\n      console.error(\"width: ${width} is invalid\");\n    }\n  }\n  setBaseBoard() {\n    this.height = 8;\n    this.width = 8;\n    var nextSquareWhite = true;\n    for (let i = 0; i < this.width; i++) {\n      this.fields.push([]);\n      for (let j = 0; j < this.height; j++) {\n        var field = new Field(nextSquareWhite, i, j);\n        field.board = this;\n        this.fields[i].push(field);\n        nextSquareWhite = !nextSquareWhite;\n      }\n      if (this.width % 2 === 0) {\n        nextSquareWhite = !nextSquareWhite;\n      }\n    }\n  }\n  unmarkButtons() {\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        this.fields[i][j].unmark();\n        this.anyButtonClicked = false;\n      }\n    }\n  }\n  setBasePosition() {\n    this.fields[0][0].setPiece(new BlackRook());\n    this.fields[0][1].setPiece(new BlackKnight());\n    this.fields[0][2].setPiece(new BlackBishop());\n    this.fields[0][3].setPiece(new BlackQueen());\n    this.fields[0][4].setPiece(new BlackKing());\n    this.fields[0][5].setPiece(new BlackBishop());\n    this.fields[0][6].setPiece(new BlackKnight());\n    this.fields[0][7].setPiece(new BlackRook());\n    for (let i = 0; i < this.width; i++) {\n      this.fields[1][i].setPiece(new BlackPawn());\n    }\n    for (let i = 0; i < this.width; i++) {\n      this.fields[6][i].setPiece(new WhitePawn());\n    }\n    this.fields[7][0].setPiece(new WhiteRook());\n    this.fields[7][1].setPiece(new WhiteKnight());\n    this.fields[7][2].setPiece(new WhiteBishop());\n    this.fields[7][3].setPiece(new WhiteQueen());\n    this.fields[7][4].setPiece(new Whiteking());\n    this.fields[7][5].setPiece(new WhiteBishop());\n    this.fields[7][6].setPiece(new WhiteKnight());\n    this.fields[7][7].setPiece(new WhiteRook());\n  }\n  constructor() {\n    this.fields = [];\n    this.width = 0;\n    this.height = 0;\n    this.anyButtonClicked = false;\n    this.markedField = null;\n    this.setBaseBoard();\n    this.setBasePosition();\n  }\n}","map":{"version":3,"names":["Field","BlackBishop","BlackKing","BlackKnight","BlackPawn","BlackQueen","BlackRook","WhiteBishop","Whiteking","WhiteKnight","WhitePawn","WhiteQueen","WhiteRook","Board","buttonClicked","height","width","checkFieldArgs","anyButtonClicked","secondButtonClicked","firstButtonClicked","fields","piece","markedField","markedToMove","marked","unmarkButtons","markedToCapture","Number","isInteger","console","error","setBaseBoard","nextSquareWhite","i","push","j","field","board","unmark","setBasePosition","setPiece","constructor"],"sources":["C:\\Users\\UÅ¼ytkownik\\Desktop\\student fullstack\\studentManager\\src\\app\\chess\\board\\board.ts"],"sourcesContent":["import { Field } from \"../field/field\";\nimport { Piece } from \"../pieces/piece\";\nimport { BlackBishop } from \"../pieces/piece/blackBishop/black-bishop\";\nimport { BlackKing } from \"../pieces/piece/blackKing/black-king\";\nimport { BlackKnight } from \"../pieces/piece/blackKnight/black-knight\";\nimport { BlackPawn } from \"../pieces/piece/blackPawn/black-pawn\";\nimport { BlackQueen } from \"../pieces/piece/blackQueen/black-queen\";\nimport { BlackRook } from \"../pieces/piece/blackRook/black-rook\";\nimport { WhiteBishop } from \"../pieces/piece/whiteBishop/white-bishop\";\nimport { Whiteking } from \"../pieces/piece/whiteKing/whiteking\";\nimport { WhiteKnight } from \"../pieces/piece/whiteKnight/white-knight\";\nimport { WhitePawn } from \"../pieces/piece/whitePawn/white-pawn\";\nimport { WhiteQueen } from \"../pieces/piece/whiteQueen/white-queen\";\nimport { WhiteRook } from \"../pieces/piece/whiteRook/white-rook\";\n\nexport class Board {\n    fields: Field[][] = [];\n    width: number = 0;\n    height: number = 0;\n    anyButtonClicked: boolean = false;\n    markedField: any = null;\n\n\n    buttonClicked(height: number, width: number) {\n        this.checkFieldArgs(height, width);\n        if (this.anyButtonClicked) {\n            this.secondButtonClicked(height, width)\n        }\n        else {\n            this.firstButtonClicked(height, width)\n        }\n    }\n\n\n    firstButtonClicked(height: number, width: number) {\n        //mark\n        if (this.fields[height][width].piece) {\n            //to do zaznacz pola mozliwe\n            this.markedField = this.fields[height][width];\n            this.fields[height][width].markedToMove = true;\n            this.anyButtonClicked = true;\n        }\n    }\n\n    secondButtonClicked(height: number, width: number) {\n        //to do podzial na biale i czarne\n        if (!this.fields[height][width].marked() && this.fields[height][width].piece == null) { }\n        else if (this.fields[height][width].markedToMove) {\n            //to do ruch\n            // this.move()\n            this.unmarkButtons();\n        }\n        else if (this.fields[height][width].markedToCapture) {\n            //to do bicie albo ruch\n            // this.capture()\n            this.unmarkButtons();\n        }\n        else if (!this.fields[height][width].marked) {\n            this.unmarkButtons();\n            this.fields[height][width].marked = true;\n            this.anyButtonClicked = true;\n        }\n    }\n\n    checkFieldArgs(height: number, width: number) {\n        if (!Number.isInteger(height) || height < 0 || height >= this.height) {\n            console.error(\" height: ${height} is invalid\")\n        }\n        if (!Number.isInteger(width) || width < 0 && width >= this.width) {\n            console.error(\"width: ${width} is invalid\")\n        }\n    }\n\n    setBaseBoard() {\n        this.height = 8;\n        this.width = 8;\n        var nextSquareWhite = true;\n        for (let i = 0; i < this.width; i++) {\n            this.fields.push([]);\n            for (let j = 0; j < this.height; j++) {\n                var field = new Field(nextSquareWhite, i, j);\n                field.board = this;\n                this.fields[i].push(field);\n                nextSquareWhite = !nextSquareWhite;\n            }\n            if (this.width % 2 === 0) {\n                nextSquareWhite = !nextSquareWhite;\n            }\n        }\n    }\n\n    unmarkButtons() {\n        for (let i = 0; i < this.width; i++) {\n            for (let j = 0; j < this.height; j++) {\n                this.fields[i][j].unmark();\n                this.anyButtonClicked = false;\n            }\n        }\n    }\n\n    setBasePosition() {\n        this.fields[0][0].setPiece(new BlackRook());\n        this.fields[0][1].setPiece(new BlackKnight());\n        this.fields[0][2].setPiece(new BlackBishop());\n        this.fields[0][3].setPiece(new BlackQueen());\n        this.fields[0][4].setPiece(new BlackKing());\n        this.fields[0][5].setPiece(new BlackBishop());\n        this.fields[0][6].setPiece(new BlackKnight());\n        this.fields[0][7].setPiece(new BlackRook());\n        for (let i = 0; i < this.width; i++) { this.fields[1][i].setPiece(new BlackPawn()); }\n\n        for (let i = 0; i < this.width; i++) { this.fields[6][i].setPiece(new WhitePawn()); }\n        \n        this.fields[7][0].setPiece(new WhiteRook());\n        this.fields[7][1].setPiece(new WhiteKnight());\n        this.fields[7][2].setPiece(new WhiteBishop());\n        this.fields[7][3].setPiece(new WhiteQueen());\n        this.fields[7][4].setPiece(new Whiteking());\n        this.fields[7][5].setPiece(new WhiteBishop());\n        this.fields[7][6].setPiece(new WhiteKnight());\n        this.fields[7][7].setPiece(new WhiteRook());\n        \n\n    }\n\n    constructor() {\n        this.setBaseBoard();\n        this.setBasePosition();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}